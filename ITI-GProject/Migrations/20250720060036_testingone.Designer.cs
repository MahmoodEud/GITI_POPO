// <auto-generated />
using System;
using ITI_GProject.Data.GContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITI_GProject.Migrations
{
    [DbContext(typeof(AppGConetxt))]
    [Migration("20250720060036_testingone")]
    partial class testingone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITI_GProject.Data.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Max_Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Video_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Max_Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Passing_Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("Starting_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("Time_Limit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ParentNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Passowrd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentAssignment", b =>
                {
                    b.Property<int>("Studet_Id")
                        .HasColumnType("int");

                    b.Property<int>("Assignemt_Id")
                        .HasColumnType("int");

                    b.HasKey("Studet_Id", "Assignemt_Id");

                    b.HasIndex("Assignemt_Id");

                    b.ToTable("StudentAssignments");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentCourse", b =>
                {
                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Subscription")
                        .HasColumnType("bit");

                    b.HasKey("Student_Id", "Course_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentQuiz", b =>
                {
                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quiz_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TotAl_Marks")
                        .HasColumnType("int");

                    b.HasKey("Student_Id", "Quiz_Id");

                    b.HasIndex("Quiz_Id");

                    b.ToTable("StudentQuizzes");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Assignment", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Lesson", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Quiz", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("LessonId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentAssignment", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Assignment", "Assignment")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("Assignemt_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI_GProject.Data.Models.Student", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("Studet_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI_GProject.Data.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.StudentQuiz", b =>
                {
                    b.HasOne("ITI_GProject.Data.Models.Quiz", "Quiz")
                        .WithMany("StudentQuizzes")
                        .HasForeignKey("Quiz_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITI_GProject.Data.Models.Student", "Student")
                        .WithMany("StudentQuizzes")
                        .HasForeignKey("Student_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Assignment", b =>
                {
                    b.Navigation("StudentAssignments");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Course", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Lesson", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Quiz", b =>
                {
                    b.Navigation("StudentQuizzes");
                });

            modelBuilder.Entity("ITI_GProject.Data.Models.Student", b =>
                {
                    b.Navigation("StudentAssignments");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
